"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var electron_1 = require("electron");
var theme_1 = require("./theme");
var global_1 = require("./global");
var Menubar = /** @class */ (function () {
    function Menubar() {
    }
    Menubar.createSubmenu = function (element, items, isSubmenu) {
        var _this = this;
        var event;
        var list = [];
        items.forEach(function (item) {
            var child = global_1.$("li.action-item." + (item.type === 'separator' || !item.enabled ? 'disable' : ''));
            if (item.type === 'separator') {
                child.appendChild(global_1.$('a.action-label.icon.separator.disabled'));
            }
            else {
                var children = [
                    global_1.$('span.menu-item-check', { 'role': 'none' }),
                    global_1.$('span.action-label', { 'aria-label': "" + item.label }, _this.getLabelFormat("" + item.label)),
                    item.submenu ? global_1.$('span.submenu-indicator') : global_1.$('span.keybinding', {}, "" + (item.accelerator ? item.accelerator : ''))
                ];
                var menuItem_1 = global_1.$.apply(void 0, ["a.action-menu-item." + (item.checked ? 'checked' : ''), { 'role': 'menuitem', 'aria-checked': item.checked }].concat(children));
                child.addEventListener('click', function () {
                    if (item.type === 'checkbox') {
                        menuItem_1.setAttribute('aria-checked', "" + item.checked);
                        menuItem_1.classList.toggle('checked');
                    }
                    if (item.click)
                        item.click(item, electron_1.remote.getCurrentWindow(), event);
                });
                child.appendChild(menuItem_1);
            }
            if (item.submenu || item.type === 'submenu') {
                var submenu = item.submenu;
                if (submenu.items.length)
                    _this.createSubmenu(child, submenu.items, true);
                element.appendChild(child);
            }
            list.push(child);
        });
        element.appendChild(global_1.$((isSubmenu ? '.submenu.context-view' : '') + ".menubar-menu-items-holder.menu-container", {}, global_1.$.apply(void 0, ['ul.actions-container', { 'role': 'menu' }].concat(list))));
    };
    Menubar.setEvents = function (hoverColor) {
        var openedMenu = false;
        var selectElementMenu;
        var pressed = false;
        var drag = document.querySelector('.titlebar-drag-region');
        // Event to menubar items
        document.querySelectorAll('.menubar-menu-button').forEach(function (elem) {
            elem.addEventListener('click', function () {
                if (drag && !openedMenu)
                    drag.style.display = 'none';
                if (drag && openedMenu)
                    drag.removeAttribute('style');
                elem.lastChild.style.left = elem.getBoundingClientRect().left + "px";
                elem.classList.toggle('open');
                selectElementMenu = elem;
                openedMenu = !openedMenu;
            });
            elem.addEventListener('mouseover', function () {
                if (openedMenu) {
                    selectElementMenu.classList.remove('open');
                    elem.lastChild.style.left = elem.getBoundingClientRect().left + "px";
                    elem.classList.add('open');
                    selectElementMenu = elem;
                }
            });
        });
        // Event to click outside of menu
        var container = document.getElementById('content-after-titlebar');
        if (container)
            container.addEventListener('click', function () {
                if (openedMenu) {
                    if (drag)
                        drag.removeAttribute('style');
                    selectElementMenu.classList.remove('open');
                    openedMenu = false;
                }
            });
        // Event to menu items
        document.querySelectorAll('.menubar .action-item:not(.disable)').forEach(function (elem) {
            elem.addEventListener('mouseover', function () {
                var contentColor = theme_1.Themebar.contentColor(hoverColor);
                elem.childNodes[0].style.backgroundColor = hoverColor;
                elem.childNodes[0].style.color = contentColor;
                elem.childNodes[0].firstChild.style.backgroundColor = contentColor;
                if (!elem.childNodes[0].lastChild.classList.contains('keybinding')) {
                    elem.childNodes[0].lastChild.style.backgroundColor = contentColor;
                }
                if (elem.childNodes[0].lastChild.classList.contains('submenu-indicator')) {
                    elem.lastChild.style.left = elem.getBoundingClientRect().width + "px";
                    elem.lastChild.classList.add('open');
                }
            });
            elem.addEventListener('mouseleave', function () {
                elem.childNodes[0].removeAttribute('style');
                elem.childNodes[0].firstChild.removeAttribute('style');
                elem.childNodes[0].lastChild.removeAttribute('style');
                if (elem.childNodes[0].lastChild.classList.contains('submenu-indicator')) {
                    elem.lastChild.classList.remove('open');
                }
            });
        });
        // Alt key event
        document.addEventListener('keydown', function (event) {
            pressed = !pressed;
            document.querySelectorAll('mnemonic').forEach(function (elem) {
                if (event.altKey)
                    elem.style.textDecoration = pressed ? 'underline' : '';
            });
        });
    };
    Menubar.getLabelFormat = function (label) {
        var titleElement = global_1.$('.menubar-menu-title', { 'aria-hidden': true });
        titleElement.innerHTML = label.indexOf('&') !== -1 ?
            label.replace(/\(&{1,2}(.)\)|&{1,2}(.)/, '<mnemonic aria-hidden="true">$2</mnemonic>') :
            this.cleanMnemonic(label);
        return titleElement;
    };
    Menubar.cleanMnemonic = function (label) {
        var regex = /\(&{1,2}(.)\)|&{1,2}(.)/;
        var matches = regex.exec(label);
        if (!matches) {
            return label;
        }
        return label.replace(regex, matches[0].charAt(0) === '&' ? '$2' : '').trim();
    };
    return Menubar;
}());
exports.Menubar = Menubar;
