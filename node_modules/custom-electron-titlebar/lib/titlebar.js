"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var electron_1 = require("electron");
var process_1 = require("process");
var path = require("path");
var fs = require("fs");
var theme_1 = require("./theme");
var menubar_1 = require("./menubar");
var global_1 = require("./global");
var Color = require('color');
var Titlebar = /** @class */ (function () {
    function Titlebar(backgroundColor, options) {
        this.defaultOptions = {
            icon: '',
            iconsStyle: theme_1.Themebar.win(),
            menu: electron_1.remote.Menu.getApplicationMenu(),
            drag: true,
            minimizable: true,
            maximizable: true,
            closeable: true,
            order: 'normal',
            menuItemHoverColor: 'rgba(0, 0, 0, .14)'
        };
        this.currentWindow = electron_1.remote.getCurrentWindow();
        this.baseUrl = path.resolve(path.dirname(require.resolve('./index')), 'assets');
        this.backgroundColor = backgroundColor;
        this.options = __assign({}, this.defaultOptions, options);
        this.createTitleBar();
        this.setStyles();
        this.addEvents();
        this.updateTitle();
    }
    Titlebar.prototype.createTitleBar = function () {
        document.body.classList.add(process_1.platform == 'win32' ? 'windows' : process_1.platform == 'linux' ? 'linux' : 'mac');
        var controlsChildren = [];
        controlsChildren.push(global_1.$(".window-icon-bg" + (!this.options.minimizable ? '.inactive' : ''), {}, global_1.$('.window-icon.window-minimize')));
        controlsChildren.push(global_1.$(".window-icon-bg" + (!this.options.maximizable ? '.inactive' : ''), {}, global_1.$(".window-icon " + (this.currentWindow.isMaximized() ? 'window-unmaximize' : 'window-maximize'))));
        controlsChildren.push(global_1.$(".window-icon-bg.window-close-bg" + (!this.options.closeable ? '.inactive' : ''), {}, global_1.$('.window-icon.window-close')));
        var div = global_1.$('#content-after-titlebar', { 'style': 'top:30px;right:0;bottom:0;left:0;position:absolute;overflow:auto;' });
        while (document.body.firstChild)
            div.appendChild(document.body.firstChild);
        document.body.appendChild(div);
        var titlebarChildren = [];
        if (this.options.drag) {
            titlebarChildren.push(global_1.$('.titlebar-drag-region'));
        }
        titlebarChildren.push(global_1.$('.window-appicon'));
        if (this.options.menu) {
            titlebarChildren.push(global_1.$('.menubar', { 'role': 'menubar' }));
        }
        titlebarChildren.push(global_1.$('.window-title'));
        if (process_1.platform !== 'darwin') {
            titlebarChildren.push(global_1.$.apply(void 0, ['.window-controls-container', {}].concat(controlsChildren)));
        }
        titlebarChildren.push(global_1.$('.resizer', { 'style': "display:" + (this.currentWindow.isMaximized() ? 'none' : 'block') }));
        document.body.prepend(global_1.$.apply(void 0, ["#titlebar.titlebar." + this.options.order,
            this.options.shadow ? { 'style': "box-shadow:" + this.options.shadow + ";" } : {}].concat(titlebarChildren)));
        if (this.options.menu)
            this.setMenu(this.options.menu);
    };
    Titlebar.prototype.setStyles = function () {
        document.head.appendChild(global_1.$('style.titlebar-style', {}, fs.readFileSync(path.resolve(this.baseUrl, 'titlebar.css'), 'utf8') + "\n      " + (this.options.icon ? ".titlebar > .window-appicon {\n        width: 35px;\n        height: 100%;\n        position: relative;\n        z-index: 99;\n        background-image: url(\"" + this.options.icon + "\");\n        background-repeat: no-repeat;\n        background-position: center center;\n        background-size: 16px;\n        flex-shrink: 0;\n      }" : '') + "\n    "));
        this.setBackground(this.backgroundColor);
        if (this.options.iconsStyle)
            this.setThemeIcons(this.options.iconsStyle);
        document.body.style.margin = '0';
        document.body.style.overflow = 'hidden';
    };
    Titlebar.prototype.addEvents = function () {
        var _this = this;
        // Minimize button
        var minimizeButton = document.querySelector('.window-minimize');
        if (minimizeButton && this.options.minimizable)
            minimizeButton.addEventListener('click', function () {
                _this.currentWindow.minimize();
            });
        // Maximize and Unmaximize button
        document.querySelectorAll('.window-maximize, .window-unmaximize').forEach(function (elem) {
            if (_this.options.maximizable)
                elem.addEventListener('click', function () {
                    if (!_this.currentWindow.isMaximized())
                        _this.currentWindow.maximize();
                    else
                        _this.currentWindow.unmaximize();
                });
        });
        // Close button
        var closeButton = document.querySelector('.window-close');
        if (closeButton && this.options.closeable)
            closeButton.addEventListener('click', function () {
                _this.currentWindow.close();
            });
        this.currentWindow.on('maximize', function () {
            showHide('.window-maximize', false);
        });
        this.currentWindow.on('unmaximize', function () {
            showHide('.window-unmaximize', true);
        });
        this.currentWindow.on('blur', function () {
            var titlebar = document.getElementById('titlebar');
            if (titlebar) {
                titlebar.style.backgroundColor = Color(titlebar.style.backgroundColor).alpha(0.9);
                titlebar.style.color = Color(titlebar.style.color).alpha(0.9);
            }
        });
        this.currentWindow.on('focus', function () {
            _this.setBackground(_this.backgroundColor);
        });
        this.currentWindow.on('enter-full-screen', function () {
            document.body.classList.add('fullscreen');
        });
        this.currentWindow.on('leave-full-screen', function () {
            document.body.classList.remove('fullscreen');
        });
    };
    /**
     * Update the title of the title bar.
     * You can use this method if change the content of `<title>` tag on your html
     * @param title The title of the title bar and document
     */
    Titlebar.prototype.updateTitle = function (title) {
        var wTitle = document.querySelector('.window-title');
        if (title)
            document.title = title;
        if (wTitle)
            wTitle.innerHTML = document.title;
    };
    /**
     * Change the background color of the title bar
     * @param color The color for the background
     */
    Titlebar.prototype.setBackground = function (color) {
        this.backgroundColor = color;
        var titlebar = document.getElementById('titlebar');
        if (titlebar) {
            titlebar.style.backgroundColor = color;
            titlebar.style.color = theme_1.Themebar.contentColor(color);
            if (!Color(color).isDark() || color === 'transparent') {
                titlebar.classList.add('light');
            }
            else {
                titlebar.classList.remove('light');
            }
        }
        theme_1.Themebar.setColors(color);
    };
    /**
     * Set the menu for the titlebar
     */
    Titlebar.prototype.setMenu = function (menu) {
        var menubar = document.querySelector('.menubar');
        if (menubar) {
            menubar.innerHTML = '';
            menu.items.forEach(function (item) {
                var menuButton = global_1.$('.menubar-menu-button', {
                    'role': 'menuitem',
                    'aria-label': menubar_1.Menubar.cleanMnemonic("" + item.label),
                    'aria-keyshortcuts': item.accelerator
                }, menubar_1.Menubar.getLabelFormat("" + item.label));
                var submenu = item.submenu;
                if (submenu && submenu.items.length)
                    menubar_1.Menubar.createSubmenu(menuButton, submenu.items, false);
                menubar.appendChild(menuButton);
            });
        }
        theme_1.Themebar.setColors(this.backgroundColor);
        if (this.options.menuItemHoverColor)
            menubar_1.Menubar.setEvents(this.options.menuItemHoverColor);
    };
    /**
     * set theme for the icons of the title bar
     */
    Titlebar.prototype.setThemeIcons = function (theme) {
        var currentTheme = document.querySelector('#icons-style');
        if (currentTheme) {
            currentTheme.textContent = theme.textContent;
        }
        else {
            var newTheme = global_1.$('style#icons-style');
            newTheme.textContent = theme.textContent;
            document.head.appendChild(newTheme);
        }
    };
    return Titlebar;
}());
exports.Titlebar = Titlebar;
function showHide(_class, _resizer) {
    var element = document.querySelector(_class);
    var wResizer = document.querySelector('.resizer');
    if (element) {
        element.classList.add(_class == '.window-maximize' ? 'window-unmaximize' : 'window-maximize');
        element.classList.remove(_class == '.window-maximize' ? 'window-maximize' : 'window-unmaximize');
    }
    if (wResizer)
        wResizer.style.display = _resizer ? 'block' : 'none';
}
